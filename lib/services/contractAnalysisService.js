import { OpenAI } from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function analyzeContract(document) {
  try {
    console.log(`üîç Starting contract analysis for: ${document.originalName || document.name}`);
    
    if (!document.content || document.content.length < 100) {
      throw new Error('Document content is too short or missing for analysis');
    }

    const maxContentLength = 8000;
    const truncatedContent = document.content.length > maxContentLength 
      ? document.content.substring(0, maxContentLength) + '...[truncated for analysis]'
      : document.content;

    console.log(`Processing contract content (${truncatedContent.length} characters)`);

    const prompt = `Analyze this legal contract and provide a comprehensive risk assessment.

Contract Content:
${truncatedContent}

Analyze the contract and return a JSON response with this exact structure:
{
  "riskScore": "HIGH|MEDIUM|LOW",
  "overallScore": number between 1-100,
  "executiveSummary": "Brief overview of the contract and key risks",
  "riskFactors": [
    {
      "category": "LIABILITY|IP|PAYMENT|TERMINATION|COMPLIANCE|OTHER",
      "severity": "HIGH|MEDIUM|LOW",
      "description": "Specific risk description",
      "clause": "Relevant clause text",
      "recommendation": "Specific recommendation"
    }
  ],
  "keyTerms": [
    {
      "term": "Term name",
      "value": "Term value",
      "category": "Category",
      "riskLevel": "HIGH|MEDIUM|LOW"
    }
  ],
  "problematicClauses": [
    {
      "clause": "Full clause text",
      "issue": "Specific problem",
      "severity": "HIGH|MEDIUM|LOW",
      "suggestion": "How to improve"
    }
  ]
}

Focus on actual contract content and provide specific, actionable insights.`;

    const response = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        {
          role: 'system',
          content: 'You are a legal contract analyst. Analyze contracts thoroughly and provide detailed risk assessments in valid JSON format.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.1,
      max_tokens: 2000,
    });

    const content = response.choices[0]?.message?.content;
    if (!content) {
      throw new Error('No content generated by AI');
    }

    let analysisData;
    try {
      const cleanContent = content.replace(/```json\n?|\n?```/g, '').trim();
      analysisData = JSON.parse(cleanContent);
    } catch (parseError) {
      console.warn('Failed to parse AI response, using fallback analysis');
      analysisData = createFallbackAnalysis(document);
    }

    const documentId = document._id?.toString() || document.id?.toString() || 'unknown-id';

    const analysis = {
      documentId,
      documentName: document.originalName || document.name || 'Unknown Document',
      riskScore: analysisData.riskScore || 'MEDIUM',
      executiveSummary: {
        overview: analysisData.executiveSummary || 'Contract analysis completed.',
        keyDates: [],
        obligations: [],
        recommendedActions: ['Review with legal counsel', 'Clarify key terms', 'Assess risk tolerance']
      },
      riskAnalysis: {
        overallScore: analysisData.overallScore || 50,
        riskFactors: analysisData.riskFactors || []
      },
      keyTerms: analysisData.keyTerms || [],
      problematicClauses: analysisData.problematicClauses || [],
      analyzedAt: new Date()
    };

    console.log(`‚úÖ Contract analysis completed for: ${document.originalName || document.name}`);
    return analysis;

  } catch (error) {
    console.error('‚ùå Error analyzing contract:', error);
    throw new Error(`Contract analysis failed: ${error.message}`);
  }
}

function createFallbackAnalysis(document) {
  return {
    riskScore: 'MEDIUM',
    overallScore: 50,
    executiveSummary: `Contract analysis completed for ${document.originalName || document.name}. Manual review recommended.`,
    riskFactors: [
      {
        category: 'OTHER',
        severity: 'MEDIUM',
        description: 'Automated analysis was limited. Manual review recommended.',
        clause: 'General contract terms',
        recommendation: 'Conduct detailed legal review'
      }
    ],
    keyTerms: [],
    problematicClauses: []
  };
}
